function getCount(t,e){return{name:t,count:e}}function getVal(t,e,n=1){return{capacity:t,children:e,output:n}}function max(t){var e=t.reduce((t,e)=>t*e),t=lcm(...t.map(t=>e/t));return e/t}function lcm(){if(!arguments.length)return!1;if(1==arguments.length)return arguments[0];for(var t=arguments.length,e=arguments[0],n=1;n<t;n++){for(var a=arguments[n],u=e;e&&a;)a<e?e%=a:a%=e;e=u*arguments[n]/(e+a)}return e}let tree=new Map;function deep(t,e=1,n=0){let a=tree.get(t.name);var u=lcm(...a.children.map(t=>tree.get(t.name).capacity/t.count));return{name:t.name,capacity:a.capacity,count:e||1,ratio:t.count,output:a.output,consume:n||0,isOriginal:0===a.children.length,children:a.children.map((t,e)=>{var n=tree.get(t.name);return deep(t,u/(n.capacity/a.children[e].count),a.capacity*t.count)})}}tree.set("铁块",getVal(60,[])),tree.set("铜块",getVal(60,[])),tree.set("硅块",getVal(30,[],2)),tree.set("钛块",getVal(30,[],2)),tree.set("石材",getVal(60,[])),tree.set("水",getVal(60,[])),tree.set("木材",getVal(60,[])),tree.set("植物燃料",getVal(60,[])),tree.set("石矿",getVal(60,[])),tree.set("石墨",getVal(30,[],2)),tree.set("磁铁",getVal(60,[])),tree.set("磁线圈",getVal(60,[getCount("磁铁",2),getCount("铜块",1)],2)),tree.set("玻璃",getVal(60,[],2)),tree.set("重氢",getVal(12,[getCount("氢",10)],5)),tree.set("钢材",getVal(20,[getCount("铁块",3)])),tree.set("液态燃料棒",getVal(20,[getCount("钛块",1),getCount("氢",5)])),tree.set("氚核燃料棒",getVal(10,[getCount("钛合金",1),getCount("重氢",10),getCount("超级磁场环",1)])),tree.set("钛合金",getVal(5,[getCount("钛块",4),getCount("钢材",4),getCount("硫酸",8)],4)),tree.set("超级磁场环",getVal(20,[getCount("电磁涡轮",2),getCount("磁铁",3),getCount("石墨",1)])),tree.set("电动机",getVal(30,[getCount("铁块",2),getCount("齿轮",2),getCount("磁线圈",1)])),tree.set("钛化玻璃",getVal(12,[getCount("玻璃",2),getCount("钛块",2),getCount("水",2)])),tree.set("棱镜",getVal(30,[getCount("玻璃",3)],2)),tree.set("有机晶体",getVal(20,[getCount("木材",10),getCount("植物燃料",20),getCount("水",10)])),tree.set("钛晶石",getVal(15,[getCount("有机晶体",1),getCount("钛块",3)])),tree.set("推进器",getVal(15,[getCount("钢材",2),getCount("铜块",3)])),tree.set("加速推进器",getVal(10,[getCount("钛合金",5),getCount("电磁涡轮",5)])),tree.set("齿轮",getVal(60,[getCount("铁块",1)])),tree.set("电磁涡轮",getVal(30,[getCount("电动机",2),getCount("磁线圈",2)])),tree.set("电路板",getVal(60,[getCount("铁块",2),getCount("铜块",1)],2)),tree.set("位面过滤器",getVal(5,[getCount("卡西米尔晶体",1),getCount("钛化玻璃",2)])),tree.set("石墨烯",getVal(20,[getCount("硫酸",1),getCount("石墨",3)],2)),tree.set("硫酸",getVal(10,[getCount("水",4),getCount("石矿",8),getCount("精炼油",6)],4)),tree.set("卡西米尔晶体",getVal(15,[getCount("钛晶石",1),getCount("石墨烯",2),getCount("氢",12)])),tree.set("蓝块",getVal(20,[getCount("磁线圈",1),getCount("电路板",1)])),tree.set("红块",getVal(10,[getCount("石墨",2),getCount("氢",2)])),tree.set("氢",getVal(15,[])),tree.set("精炼油",getVal(15,[],2)),tree.set("光子合并器",getVal(20,[getCount("棱镜",2),getCount("电路板",1)])),tree.set("太阳帆",getVal(15,[getCount("石墨烯",1),getCount("光子合并器",1)],2)),tree.set("微晶元件",getVal(30,[getCount("硅块",2),getCount("铜块",1)])),tree.set("处理器",getVal(20,[getCount("电路板",2),getCount("微晶元件",2)])),tree.set("量子芯片",getVal(10,[getCount("处理器",2),getCount("位面过滤器",2)]));let productList=[];tree.forEach((t,e)=>{t.children.length&&productList.push(e)}),new Vue({data:{list:tree,selectProduct:["蓝块"],currentProduct:{},searchProduct:"蓝块",ratio:new Map,productList:productList,productLine:[],defaultProps:{children:"children",label:"name"},hierarchy:[]},mounted:function(){this.selectChange(),this.searchChange()},methods:{clickItem:function(t){this.searchProduct=t,this.searchChange()},handleClick:function(t){this.productLine=[deep({name:this.selectProduct[t.paneName],count:1})],this.xxx(this.productLine[0])},searchChange:function(){this.currentProduct=tree.get(this.searchProduct);let n=[];tree.forEach((t,e)=>{!t.children.length||(t=t.children.find(t=>t.name===this.searchProduct))&&n.push({name:e,count:t.count})}),this.currentProduct.used=n},selectChange:function(){if(this.selectProduct.length){this.productLine=[deep({name:this.selectProduct[0],count:1})],this.xxx(this.productLine[0]),this.ratio=new Map,this.hierarchy=[],this.selectProduct.forEach(t=>{t=[deep({name:t,count:1})];this.xxx(t[0]),this.getRatio(t)});let a=[];this.ratio.forEach((t,e)=>{if(this.selectProduct.includes(e)){a.push({name:e,level:[0]});let t=tree.get(e);t.children.forEach(e=>{let t=a.find(t=>t.name===e.name);t?t.level.push(1):a.push({name:e.name,level:[1]})})}else{let t=tree.get(e);var n=a.find(t=>t.name===e);t.children.forEach(e=>{let t=a.find(t=>t.name===e.name);t?t.level.push(Math.max(...n.level)+1):a.push({name:e.name,level:[Math.max(...n.level)+1]})})}}),a.map(t=>{t.level=Math.max(...t.level)});let e=[];a.forEach(t=>{e[t.level]?e[t.level].push({name:t.name,count:this.ratio.get(t.name)}):e[t.level]=[{name:t.name,count:this.ratio.get(t.name)}]}),this.hierarchy=e}else this.ratio=new Map,this.hierarchy=[],this.productLine=[]},countChange:function(){this.update(this.productLine[0])},xxx:function(t){this.update(this.productLine[0]);let e=t.children.map(t=>Math.abs(t.capacity*t.count*t.output-t.consume));var n=lcm(...e.filter(t=>t))/(t.capacity*t.children[0].ratio);t.capacity*t.count*t.output-t.consume!=0&&(t.count+=Math.ceil(n),this.update(this.productLine[0])),t.children.forEach(t=>{t.capacity*t.count*t.output-t.consume!=0&&(t.count=Math.ceil(t.consume/(t.capacity*t.output)),t.children.length&&this.xxx(t))})},getRatio:function(t){this.yyy(t,this.ratio);var n=max([...this.ratio.values()]);this.ratio.forEach((t,e)=>{this.ratio.set(e,t/n)})},yyy:function(t,e){t.map(t=>{void 0===e.get(t.name)?e.set(t.name,t.count):e.set(t.name,e.get(t.name)+t.count),this.yyy(t.children,e)})},update:function(e){e.children.map(t=>{t.consume=e.capacity*e.count*t.ratio,t.children.length&&this.update(t)})}}}).$mount("#app");